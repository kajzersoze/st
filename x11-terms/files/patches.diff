--- a/st.h-org	2020-12-19 23:54:03.741382272 +0100
+++ b/st.h	2020-12-21 22:53:31.838278089 +0100
@@ -11,8 +11,14 @@
 #define DIVCEIL(n, d)		(((n) + ((d) - 1)) / (d))
 #define DEFAULT(a, b)		(a) = (a) ? (a) : (b)
 #define LIMIT(x, a, b)		(x) = (x) < (a) ? (a) : (x) > (b) ? (b) : (x)
+#ifdef LIGATURES
+#define ATTRCMP(a, b)		(((a).mode & (~ATTR_WRAP) & (~ATTR_LIGA)) != ((b).mode & (~ATTR_WRAP) & (~ATTR_LIGA)) || \
+                (a).fg != (b).fg || \
+                (a).bg != (b).bg)
+#else
 #define ATTRCMP(a, b)		((a).mode != (b).mode || (a).fg != (b).fg || \
 				(a).bg != (b).bg)
+#endif
 #define TIMEDIFF(t1, t2)	((t1.tv_sec-t2.tv_sec)*1000 + \
 				(t1.tv_nsec-t2.tv_nsec)/1E6)
 #define MODBIT(x, set, bit)	((set) ? ((x) |= (bit)) : ((x) &= ~(bit)))
@@ -33,6 +39,14 @@
 	ATTR_WRAP       = 1 << 8,
 	ATTR_WIDE       = 1 << 9,
 	ATTR_WDUMMY     = 1 << 10,
+#ifdef BOXDRAW
+    ATTR_BOXDRAW    = 1 << 11,
+#endif
+#if defined(BOXDRAW) && defined(LIGATURES)
+    ATTR_LIGA       = 1 << 12,
+#elif defined(LIGATURES) && ! defined(BOXDRAW)
+    ATTR_LIGA       = 1 << 11,
+#endif    
 	ATTR_BOLD_FAINT = ATTR_BOLD | ATTR_FAINT,
 };
 
@@ -81,6 +95,13 @@
 void redraw(void);
 void draw(void);
 
+#ifdef SCROLLBACK
+void kscrolldown(const Arg *);
+void kscrollup(const Arg *);
+#endif
+#ifdef EXTERNALPIPE
+void externalpipe(const Arg *);
+#endif
 void printscreen(const Arg *);
 void printsel(const Arg *);
 void sendbreak(const Arg *);
@@ -111,6 +132,16 @@
 void *xrealloc(void *, size_t);
 char *xstrdup(char *);
 
+#ifdef BOXDRAW
+int isboxdraw(Rune);
+ushort boxdrawindex(const Glyph *);
+#ifdef XFT_VERSION
+/* only exposed to x.c, otherwise we'll need Xft.h for the types */
+void boxdraw_xinit(Display *, Colormap, XftDraw *, Visual *);
+void drawboxes(int, int, int, int, XftColor *, XftColor *, const XftGlyphFontSpec *, int);
+#endif
+#endif
+
 /* config.h globals */
 extern char *utmp;
 extern char *scroll;
@@ -123,3 +154,220 @@
 extern unsigned int tabspaces;
 extern unsigned int defaultfg;
 extern unsigned int defaultbg;
+#ifdef BOXDRAW
+extern const int boxdraw, boxdraw_bold, boxdraw_braille;
+/*
+ * Copyright 2018 Avi Halachmi (:avih) avihpit@yahoo.com https://github.com/avih
+ * MIT/X Consortium License
+ */
+
+/*
+ * U+25XX codepoints data
+ *
+ * References:
+ *   http://www.unicode.org/charts/PDF/U2500.pdf
+ *   http://www.unicode.org/charts/PDF/U2580.pdf
+ *
+ * Test page:
+ *   https://github.com/GNOME/vte/blob/master/doc/boxes.txt
+ */
+
+/* Each shape is encoded as 16-bits. Higher bits are category, lower are data */
+/* Categories (mutually exclusive except BDB): */
+/* For convenience, BDL/BDA/BBS/BDB are 1 bit each, the rest are enums */
+#define BDL (1<<8)   /* Box Draw Lines (light/double/heavy) */
+#define BDA (1<<9)   /* Box Draw Arc (light) */
+
+#define BBD (1<<10)  /* Box Block Down (lower) X/8 */
+#define BBL (2<<10)  /* Box Block Left X/8 */
+#define BBU (3<<10)  /* Box Block Upper X/8 */
+#define BBR (4<<10)  /* Box Block Right X/8 */
+#define BBQ (5<<10)  /* Box Block Quadrants */
+#define BRL (6<<10)  /* Box Braille (data is lower byte of U28XX) */
+
+#define BBS (1<<14)  /* Box Block Shades */
+#define BDB (1<<15)  /* Box Draw is Bold */
+
+/* (BDL/BDA) Light/Double/Heavy x Left/Up/Right/Down/Horizontal/Vertical      */
+/* Heavy is light+double (literally drawing light+double align to form heavy) */
+#define LL (1<<0)
+#define LU (1<<1)
+#define LR (1<<2)
+#define LD (1<<3)
+#define LH (LL+LR)
+#define LV (LU+LD)
+
+#define DL (1<<4)
+#define DU (1<<5)
+#define DR (1<<6)
+#define DD (1<<7)
+#define DH (DL+DR)
+#define DV (DU+DD)
+
+#define HL (LL+DL)
+#define HU (LU+DU)
+#define HR (LR+DR)
+#define HD (LD+DD)
+#define HH (HL+HR)
+#define HV (HU+HD)
+
+/* (BBQ) Quadrants Top/Bottom x Left/Right */
+#define TL (1<<0)
+#define TR (1<<1)
+#define BL (1<<2)
+#define BR (1<<3)
+
+/* Data for U+2500 - U+259F except dashes/diagonals */
+static const unsigned short boxdata[256] = {
+	/* light lines */
+	[0x00] = BDL + LH,       /* light horizontal */
+	[0x02] = BDL + LV,       /* light vertical */
+	[0x0c] = BDL + LD + LR,  /* light down and right */
+	[0x10] = BDL + LD + LL,  /* light down and left */
+	[0x14] = BDL + LU + LR,  /* light up and right */
+	[0x18] = BDL + LU + LL,  /* light up and left */
+	[0x1c] = BDL + LV + LR,  /* light vertical and right */
+	[0x24] = BDL + LV + LL,  /* light vertical and left */
+	[0x2c] = BDL + LH + LD,  /* light horizontal and down */
+	[0x34] = BDL + LH + LU,  /* light horizontal and up */
+	[0x3c] = BDL + LV + LH,  /* light vertical and horizontal */
+	[0x74] = BDL + LL,       /* light left */
+	[0x75] = BDL + LU,       /* light up */
+	[0x76] = BDL + LR,       /* light right */
+	[0x77] = BDL + LD,       /* light down */
+
+	/* heavy [+light] lines */
+	[0x01] = BDL + HH,
+	[0x03] = BDL + HV,
+	[0x0d] = BDL + HR + LD,
+	[0x0e] = BDL + HD + LR,
+	[0x0f] = BDL + HD + HR,
+	[0x11] = BDL + HL + LD,
+	[0x12] = BDL + HD + LL,
+	[0x13] = BDL + HD + HL,
+	[0x15] = BDL + HR + LU,
+	[0x16] = BDL + HU + LR,
+	[0x17] = BDL + HU + HR,
+	[0x19] = BDL + HL + LU,
+	[0x1a] = BDL + HU + LL,
+	[0x1b] = BDL + HU + HL,
+	[0x1d] = BDL + HR + LV,
+	[0x1e] = BDL + HU + LD + LR,
+	[0x1f] = BDL + HD + LR + LU,
+	[0x20] = BDL + HV + LR,
+	[0x21] = BDL + HU + HR + LD,
+	[0x22] = BDL + HD + HR + LU,
+	[0x23] = BDL + HV + HR,
+	[0x25] = BDL + HL + LV,
+	[0x26] = BDL + HU + LD + LL,
+	[0x27] = BDL + HD + LU + LL,
+	[0x28] = BDL + HV + LL,
+	[0x29] = BDL + HU + HL + LD,
+	[0x2a] = BDL + HD + HL + LU,
+	[0x2b] = BDL + HV + HL,
+	[0x2d] = BDL + HL + LD + LR,
+	[0x2e] = BDL + HR + LL + LD,
+	[0x2f] = BDL + HH + LD,
+	[0x30] = BDL + HD + LH,
+	[0x31] = BDL + HD + HL + LR,
+	[0x32] = BDL + HR + HD + LL,
+	[0x33] = BDL + HH + HD,
+	[0x35] = BDL + HL + LU + LR,
+	[0x36] = BDL + HR + LU + LL,
+	[0x37] = BDL + HH + LU,
+	[0x38] = BDL + HU + LH,
+	[0x39] = BDL + HU + HL + LR,
+	[0x3a] = BDL + HU + HR + LL,
+	[0x3b] = BDL + HH + HU,
+	[0x3d] = BDL + HL + LV + LR,
+	[0x3e] = BDL + HR + LV + LL,
+	[0x3f] = BDL + HH + LV,
+	[0x40] = BDL + HU + LH + LD,
+	[0x41] = BDL + HD + LH + LU,
+	[0x42] = BDL + HV + LH,
+	[0x43] = BDL + HU + HL + LD + LR,
+	[0x44] = BDL + HU + HR + LD + LL,
+	[0x45] = BDL + HD + HL + LU + LR,
+	[0x46] = BDL + HD + HR + LU + LL,
+	[0x47] = BDL + HH + HU + LD,
+	[0x48] = BDL + HH + HD + LU,
+	[0x49] = BDL + HV + HL + LR,
+	[0x4a] = BDL + HV + HR + LL,
+	[0x4b] = BDL + HV + HH,
+	[0x78] = BDL + HL,
+	[0x79] = BDL + HU,
+	[0x7a] = BDL + HR,
+	[0x7b] = BDL + HD,
+	[0x7c] = BDL + HR + LL,
+	[0x7d] = BDL + HD + LU,
+	[0x7e] = BDL + HL + LR,
+	[0x7f] = BDL + HU + LD,
+
+	/* double [+light] lines */
+	[0x50] = BDL + DH,
+	[0x51] = BDL + DV,
+	[0x52] = BDL + DR + LD,
+	[0x53] = BDL + DD + LR,
+	[0x54] = BDL + DR + DD,
+	[0x55] = BDL + DL + LD,
+	[0x56] = BDL + DD + LL,
+	[0x57] = BDL + DL + DD,
+	[0x58] = BDL + DR + LU,
+	[0x59] = BDL + DU + LR,
+	[0x5a] = BDL + DU + DR,
+	[0x5b] = BDL + DL + LU,
+	[0x5c] = BDL + DU + LL,
+	[0x5d] = BDL + DL + DU,
+	[0x5e] = BDL + DR + LV,
+	[0x5f] = BDL + DV + LR,
+	[0x60] = BDL + DV + DR,
+	[0x61] = BDL + DL + LV,
+	[0x62] = BDL + DV + LL,
+	[0x63] = BDL + DV + DL,
+	[0x64] = BDL + DH + LD,
+	[0x65] = BDL + DD + LH,
+	[0x66] = BDL + DD + DH,
+	[0x67] = BDL + DH + LU,
+	[0x68] = BDL + DU + LH,
+	[0x69] = BDL + DH + DU,
+	[0x6a] = BDL + DH + LV,
+	[0x6b] = BDL + DV + LH,
+	[0x6c] = BDL + DH + DV,
+
+	/* (light) arcs */
+	[0x6d] = BDA + LD + LR,
+	[0x6e] = BDA + LD + LL,
+	[0x6f] = BDA + LU + LL,
+	[0x70] = BDA + LU + LR,
+
+	/* Lower (Down) X/8 block (data is 8 - X) */
+	[0x81] = BBD + 7, [0x82] = BBD + 6, [0x83] = BBD + 5, [0x84] = BBD + 4,
+	[0x85] = BBD + 3, [0x86] = BBD + 2, [0x87] = BBD + 1, [0x88] = BBD + 0,
+
+	/* Left X/8 block (data is X) */
+	[0x89] = BBL + 7, [0x8a] = BBL + 6, [0x8b] = BBL + 5, [0x8c] = BBL + 4,
+	[0x8d] = BBL + 3, [0x8e] = BBL + 2, [0x8f] = BBL + 1,
+
+	/* upper 1/2 (4/8), 1/8 block (X), right 1/2, 1/8 block (8-X) */
+	[0x80] = BBU + 4, [0x94] = BBU + 1,
+	[0x90] = BBR + 4, [0x95] = BBR + 7,
+
+	/* Quadrants */
+	[0x96] = BBQ + BL,
+	[0x97] = BBQ + BR,
+	[0x98] = BBQ + TL,
+	[0x99] = BBQ + TL + BL + BR,
+	[0x9a] = BBQ + TL + BR,
+	[0x9b] = BBQ + TL + TR + BL,
+	[0x9c] = BBQ + TL + TR + BR,
+	[0x9d] = BBQ + TR,
+	[0x9e] = BBQ + BL + TR,
+	[0x9f] = BBQ + BL + TR + BR,
+
+	/* Shades, data is an alpha value in 25% units (1/4, 1/2, 3/4) */
+	[0x91] = BBS + 1, [0x92] = BBS + 2, [0x93] = BBS + 3,
+
+	/* U+2504 - U+250B, U+254C - U+254F: unsupported (dashes) */
+	/* U+2571 - U+2573: unsupported (diagonals) */
+};
+#endif
--- a/st.c-org	2020-12-19 23:54:03.741382272 +0100
+++ b/st.c	2020-12-21 22:55:05.573504829 +0100
@@ -17,6 +17,17 @@
 #include <unistd.h>
 #include <wchar.h>
 
+#ifdef BOXDRAW
+#include <X11/Xft/Xft.h>
+#endif
+
+#ifdef LIGATURES
+#include <math.h>
+#include <X11/Xft/Xft.h>
+#include <harfbuzz/hb.h>
+#include <harfbuzz/hb-ft.h>
+#endif
+
 #include "st.h"
 #include "win.h"
 
@@ -35,6 +46,9 @@
 #define ESC_ARG_SIZ   16
 #define STR_BUF_SIZ   ESC_BUF_SIZ
 #define STR_ARG_SIZ   ESC_ARG_SIZ
+#ifdef SCROLLBACK
+#define HISTSIZE      2000
+#endif
 
 /* macros */
 #define IS_SET(flag)		((term.mode & (flag)) != 0)
@@ -42,6 +56,14 @@
 #define ISCONTROLC1(c)		(BETWEEN(c, 0x80, 0x9f))
 #define ISCONTROL(c)		(ISCONTROLC0(c) || ISCONTROLC1(c))
 #define ISDELIM(u)		(u && wcschr(worddelimiters, u))
+#ifdef SCROLLBACK
+#define TLINE(y)		((y) < term.scr ? term.hist[((y) + term.histi - \
+				term.scr + HISTSIZE + 1) % HISTSIZE] : \
+				term.line[(y) - term.scr])
+#endif
+#ifdef EXTERNALPIPE
+#define TLINE_HIST(y)           ((y) <= HISTSIZE-term.row+2 ? term.hist[(y)] : term.line[(y-HISTSIZE+term.row-3)])
+#endif
 
 enum term_mode {
 	MODE_WRAP        = 1 << 0,
@@ -115,7 +137,12 @@
 	int col;      /* nb col */
 	Line *line;   /* screen */
 	Line *alt;    /* alternate screen */
-	int *dirty;   /* dirtyness of lines */
+#ifdef SCROLLBACK
+    Line hist[HISTSIZE]; /* history buffer */
+	int histi;    /* history index */
+	int scr;      /* scroll back */    
+#endif
+    int *dirty;   /* dirtyness of lines */
 	TCursor c;    /* cursor */
 	int ocx;      /* old cursor col */
 	int ocy;      /* old cursor row */
@@ -184,8 +211,13 @@
 static void tputtab(int);
 static void tputc(Rune);
 static void treset(void);
+#ifdef SCROLLBACK
+static void tscrollup(int, int, int);
+static void tscrolldown(int, int, int);
+#else
 static void tscrollup(int, int);
 static void tscrolldown(int, int);
+#endif
 static void tsetattr(int *, int);
 static void tsetchar(Rune, Glyph *, int, int);
 static void tsetdirt(int, int);
@@ -231,6 +263,143 @@
 static Rune utfmin[UTF_SIZ + 1] = {       0,    0,  0x80,  0x800,  0x10000};
 static Rune utfmax[UTF_SIZ + 1] = {0x10FFFF, 0x7F, 0x7FF, 0xFFFF, 0x10FFFF};
 
+#ifdef LIGATURES
+void hbtransformsegment(XftFont *xfont, const Glyph *string, hb_codepoint_t *codepoints, int start, int length);
+void hbunloadfonts();
+void hbtransform(XftGlyphFontSpec *specs, const Glyph *glyphs, size_t len, int x, int y);
+hb_font_t *hbfindfont(XftFont *match);
+
+typedef struct {
+	XftFont *match;
+	hb_font_t *font;
+} HbFontMatch;
+
+static int hbfontslen = 0;
+static HbFontMatch *hbfontcache = NULL;
+
+void
+hbunloadfonts()
+{
+	for (int i = 0; i < hbfontslen; i++) {
+		hb_font_destroy(hbfontcache[i].font);
+		XftUnlockFace(hbfontcache[i].match);
+	}
+
+	if (hbfontcache != NULL) {
+		free(hbfontcache);
+		hbfontcache = NULL;
+	}
+	hbfontslen = 0;
+}
+
+hb_font_t *
+hbfindfont(XftFont *match)
+{
+	for (int i = 0; i < hbfontslen; i++) {
+		if (hbfontcache[i].match == match)
+			return hbfontcache[i].font;
+	}
+
+	/* Font not found in cache, caching it now. */
+	hbfontcache = realloc(hbfontcache, sizeof(HbFontMatch) * (hbfontslen + 1));
+	FT_Face face = XftLockFace(match);
+	hb_font_t *font = hb_ft_font_create(face, NULL);
+	if (font == NULL)
+		die("Failed to load Harfbuzz font.");
+
+	hbfontcache[hbfontslen].match = match;
+	hbfontcache[hbfontslen].font = font;
+	hbfontslen += 1;
+
+	return font;
+}
+
+void
+hbtransform(XftGlyphFontSpec *specs, const Glyph *glyphs, size_t len, int x, int y)
+{
+	int start = 0, length = 1, gstart = 0;
+	hb_codepoint_t *codepoints = calloc(len, sizeof(hb_codepoint_t));
+
+	for (int idx = 1, specidx = 1; idx < len; idx++) {
+		if (glyphs[idx].mode & ATTR_WDUMMY) {
+			length += 1;
+			continue;
+		}
+
+		if (specs[specidx].font != specs[start].font || ATTRCMP(glyphs[gstart], glyphs[idx]) || selected(x + idx, y) != selected(x + gstart, y)) {
+			hbtransformsegment(specs[start].font, glyphs, codepoints, gstart, length);
+
+			/* Reset the sequence. */
+			length = 1;
+			start = specidx;
+			gstart = idx;
+		} else {
+			length += 1;
+		}
+
+		specidx++;
+	}
+
+	/* EOL. */
+	hbtransformsegment(specs[start].font, glyphs, codepoints, gstart, length);
+
+	/* Apply the transformation to glyph specs. */
+	for (int i = 0, specidx = 0; i < len; i++) {
+		if (glyphs[i].mode & ATTR_WDUMMY)
+			continue;
+
+        if (glyphs[i].mode & ATTR_BOXDRAW) {
+			specidx++;
+			continue;
+        }
+
+		if (codepoints[i] != specs[specidx].glyph)
+			((Glyph *)glyphs)[i].mode |= ATTR_LIGA;
+
+		specs[specidx++].glyph = codepoints[i];
+	}
+
+	free(codepoints);
+}
+
+void
+hbtransformsegment(XftFont *xfont, const Glyph *string, hb_codepoint_t *codepoints, int start, int length)
+{
+	hb_font_t *font = hbfindfont(xfont);
+	if (font == NULL)
+		return;
+
+	Rune rune;
+	ushort mode = USHRT_MAX;
+	hb_buffer_t *buffer = hb_buffer_create();
+	hb_buffer_set_direction(buffer, HB_DIRECTION_LTR);
+
+	/* Fill buffer with codepoints. */
+	for (int i = start; i < (start+length); i++) {
+		rune = string[i].u;
+		mode = string[i].mode;
+		if (mode & ATTR_WDUMMY)
+			rune = 0x0020;
+		hb_buffer_add_codepoints(buffer, &rune, 1, 0, 1);
+	}
+
+	/* Shape the segment. */
+	hb_shape(font, buffer, NULL, 0);
+
+	/* Get new glyph info. */
+	hb_glyph_info_t *info = hb_buffer_get_glyph_infos(buffer, NULL);
+
+	/* Write new codepoints. */
+	for (int i = 0; i < length; i++) {
+		hb_codepoint_t gid = info[i].codepoint;
+		codepoints[start+i] = gid;
+	}
+
+	/* Cleanup. */
+	hb_buffer_destroy(buffer);
+}
+#endif
+
 ssize_t
 xwrite(int fd, const char *s, size_t len)
 {
@@ -413,15 +582,37 @@
 tlinelen(int y)
 {
 	int i = term.col;
-
+#ifdef SCROLLBACK
+    if (TLINE(y)[i - 1].mode & ATTR_WRAP)
+#else        
 	if (term.line[y][i - 1].mode & ATTR_WRAP)
+#endif        
 		return i;
-
+#ifdef SCROLLBACK
+    while (i > 0 && TLINE(y)[i - 1].u == ' ')
+#else        
 	while (i > 0 && term.line[y][i - 1].u == ' ')
+#endif        
+		--i;
+
+	return i;
+}
+
+#ifdef EXTERNALPIPE
+int
+tlinehistlen(int y)
+{
+	int i = term.col;
+
+	if (TLINE_HIST(y)[i - 1].mode & ATTR_WRAP)
+		return i;
+
+	while (i > 0 && TLINE_HIST(y)[i - 1].u == ' ')
 		--i;
 
 	return i;
 }
+#endif
 
 void
 selstart(int col, int row, int snap)
@@ -526,7 +717,11 @@
 		 * Snap around if the word wraps around at the end or
 		 * beginning of a line.
 		 */
+#ifdef SCROLLBACK
+        prevgp = &TLINE(*y)[*x];
+#else        
 		prevgp = &term.line[*y][*x];
+#endif        
 		prevdelim = ISDELIM(prevgp->u);
 		for (;;) {
 			newx = *x + direction;
@@ -541,14 +736,22 @@
 					yt = *y, xt = *x;
 				else
 					yt = newy, xt = newx;
-				if (!(term.line[yt][xt].mode & ATTR_WRAP))
+#ifdef SCROLLBACK
+                if (!(TLINE(yt)[xt].mode & ATTR_WRAP))
+#else                    
+				if (!(term.line[yt][xt].mode & ATTR_WRAP))                    
+#endif                    
 					break;
 			}
 
 			if (newx >= tlinelen(newy))
 				break;
 
+#ifdef SCROLLBACK
+            gp = &TLINE(newy)[newx];
+#else            
 			gp = &term.line[newy][newx];
+#endif            
 			delim = ISDELIM(gp->u);
 			if (!(gp->mode & ATTR_WDUMMY) && (delim != prevdelim
 					|| (delim && gp->u != prevgp->u)))
@@ -569,14 +772,22 @@
 		*x = (direction < 0) ? 0 : term.col - 1;
 		if (direction < 0) {
 			for (; *y > 0; *y += direction) {
+#ifdef SCROLLBACK
+                if (!(TLINE(*y-1)[term.col-1].mode
+#else                            
 				if (!(term.line[*y-1][term.col-1].mode
+#endif                        
 						& ATTR_WRAP)) {
 					break;
 				}
 			}
 		} else if (direction > 0) {
 			for (; *y < term.row-1; *y += direction) {
+#ifdef SCROLLBACK
+                if (!(TLINE(*y)[term.col-1].mode
+#else                            
 				if (!(term.line[*y][term.col-1].mode
+#endif                        
 						& ATTR_WRAP)) {
 					break;
 				}
@@ -607,13 +818,25 @@
 		}
 
 		if (sel.type == SEL_RECTANGULAR) {
+#ifdef SCROLLBACK
+            gp = &TLINE(y)[sel.nb.x];
+#else            
 			gp = &term.line[y][sel.nb.x];
+#endif            
 			lastx = sel.ne.x;
 		} else {
+#ifdef SCROLLBACK
+            gp = &TLINE(y)[sel.nb.y == y ? sel.nb.x : 0];
+#else            
 			gp = &term.line[y][sel.nb.y == y ? sel.nb.x : 0];
+#endif            
 			lastx = (sel.ne.y == y) ? sel.ne.x : term.col-1;
 		}
+#ifdef SCROLLBACK
+        last = &TLINE(y)[MIN(lastx, linelen-1)];
+#else        
 		last = &term.line[y][MIN(lastx, linelen-1)];
+#endif        
 		while (last >= gp && last->u == ' ')
 			--last;
 
@@ -848,6 +1071,11 @@
 ttywrite(const char *s, size_t n, int may_echo)
 {
 	const char *next;
+#ifdef SCROLLBACK
+    Arg arg = (Arg) { .i = term.scr };
+
+	kscrolldown(&arg);
+#endif
 
 	if (may_echo && IS_SET(MODE_ECHO))
 		twrite(s, n, 1);
@@ -1058,8 +1286,47 @@
 	tfulldirt();
 }
 
+#ifdef SCROLLBACK
 void
+kscrolldown(const Arg* a)
+{
+	int n = a->i;
+
+	if (n < 0)
+		n = term.row + n;
+
+	if (n > term.scr)
+		n = term.scr;
+
+	if (term.scr > 0) {
+		term.scr -= n;
+		selscroll(0, -n);
+		tfulldirt();
+	}
+}
+
+void
+kscrollup(const Arg* a)
+{
+	int n = a->i;
+
+	if (n < 0)
+		n = term.row + n;
+
+	if (term.scr <= HISTSIZE-n) {
+		term.scr += n;
+		selscroll(0, n);
+		tfulldirt();
+	}
+}
+#endif
+
+void
+#ifdef SCROLLBACK
+tscrolldown(int orig, int n, int copyhist)
+#else    
 tscrolldown(int orig, int n)
+#endif    
 {
 	int i;
 	Line temp;
@@ -1075,17 +1342,38 @@
 		term.line[i-n] = temp;
 	}
 
+#ifdef SCROLLBACK
+    if (term.scr == 0)
+		selscroll(orig, n);
+#else    
 	selscroll(orig, n);
+#endif    
 }
 
 void
+#ifdef SCROLLBACK
+tscrollup(int orig, int n, int copyhist)
+#else    
 tscrollup(int orig, int n)
+#endif
 {
 	int i;
 	Line temp;
 
 	LIMIT(n, 0, term.bot-orig+1);
 
+#ifdef SCROLLBACK
+	if (copyhist) {
+		term.histi = (term.histi + 1) % HISTSIZE;
+		temp = term.hist[term.histi];
+		term.hist[term.histi] = term.line[orig];
+		term.line[orig] = temp;
+	}
+
+	if (term.scr > 0 && term.scr < HISTSIZE)
+		term.scr = MIN(term.scr + n, HISTSIZE-1);
+#endif
+
 	tclearregion(0, orig, term.col-1, orig+n-1);
 	tsetdirt(orig+n, term.bot);
 
@@ -1095,7 +1383,12 @@
 		term.line[i+n] = temp;
 	}
 
+#ifdef SCROLLBACK
+    if (term.scr == 0)
+		selscroll(orig, -n);
+#else
 	selscroll(orig, -n);
+#endif    
 }
 
 void
@@ -1124,7 +1417,11 @@
 	int y = term.c.y;
 
 	if (y == term.bot) {
+#ifdef SCROLLBACK
+        tscrollup(term.top, 1, 1);
+#else        
 		tscrollup(term.top, 1);
+#endif        
 	} else {
 		y++;
 	}
@@ -1219,6 +1516,11 @@
 	term.dirty[y] = 1;
 	term.line[y][x] = *attr;
 	term.line[y][x].u = u;
+
+    #ifdef BOXDRAW
+	if (isboxdraw(u))
+		term.line[y][x].mode |= ATTR_BOXDRAW;
+    #endif
 }
 
 void
@@ -1289,14 +1591,22 @@
 tinsertblankline(int n)
 {
 	if (BETWEEN(term.c.y, term.top, term.bot))
+#ifdef SCROLLBACK
+        tscrolldown(term.c.y, n, 0);
+#else    
 		tscrolldown(term.c.y, n);
+#endif        
 }
 
 void
 tdeleteline(int n)
 {
 	if (BETWEEN(term.c.y, term.top, term.bot))
+#ifdef SCROLLBACK
+        tscrollup(term.c.y, n, 0);
+#else    
 		tscrollup(term.c.y, n);
+#endif        
 }
 
 int32_t
@@ -1733,11 +2043,19 @@
 		break;
 	case 'S': /* SU -- Scroll <n> line up */
 		DEFAULT(csiescseq.arg[0], 1);
+#ifdef SCROLLBACK
+        tscrollup(term.top, csiescseq.arg[0], 0);
+#else        
 		tscrollup(term.top, csiescseq.arg[0]);
+#endif        
 		break;
 	case 'T': /* SD -- Scroll <n> line down */
 		DEFAULT(csiescseq.arg[0], 1);
+#ifdef SCROLLBACK
+        tscrolldown(term.top, csiescseq.arg[0], 0);
+#else        
 		tscrolldown(term.top, csiescseq.arg[0]);
+#endif        
 		break;
 	case 'L': /* IL -- Insert <n> blank lines */
 		DEFAULT(csiescseq.arg[0], 1);
@@ -1904,6 +2222,63 @@
 	strdump();
 }
 
+#ifdef EXTERNALPIPE
+void
+externalpipe(const Arg *arg)
+{
+	int to[2];
+	char buf[UTF_SIZ];
+	void (*oldsigpipe)(int);
+	Glyph *bp, *end;
+	int lastpos, n, newline;
+
+	if (pipe(to) == -1)
+		return;
+
+	switch (fork()) {
+	case -1:
+		close(to[0]);
+		close(to[1]);
+		return;
+	case 0:
+		dup2(to[0], STDIN_FILENO);
+		close(to[0]);
+		close(to[1]);
+		execvp(((char **)arg->v)[0], (char **)arg->v);
+		fprintf(stderr, "st: execvp %s\n", ((char **)arg->v)[0]);
+		perror("failed");
+		exit(0);
+	}
+
+	close(to[0]);
+	/* ignore sigpipe for now, in case child exists early */
+	oldsigpipe = signal(SIGPIPE, SIG_IGN);
+	newline = 0;
+	for (n = 0; n <= HISTSIZE + 2; n++) {
+		bp = TLINE_HIST(n);
+		lastpos = MIN(tlinehistlen(n) + 1, term.col) - 1;
+		if (lastpos < 0)
+			break;
+		if (lastpos == 0)
+            		continue;	
+		end = &bp[lastpos + 1];
+		for (; bp < end; ++bp)
+			if (xwrite(to[1], buf, utf8encode(bp->u, buf)) < 0)
+				break;
+		if ((newline = TLINE_HIST(n)[lastpos].mode & ATTR_WRAP))
+			continue;
+		if (xwrite(to[1], "\n", 1) < 0)
+			break;
+		newline = 0;
+	}
+	if (newline)
+		(void)xwrite(to[1], "\n", 1);
+	close(to[1]);
+	/* restore */
+	signal(SIGPIPE, oldsigpipe);
+}
+#endif
+
 void
 strparse(void)
 {
@@ -2241,7 +2616,11 @@
 		return 0;
 	case 'D': /* IND -- Linefeed */
 		if (term.c.y == term.bot) {
-			tscrollup(term.top, 1);
+#ifdef SCROLLBACK
+            tscrollup(term.top, 1, 1);
+#else            
+            tscrollup(term.top, 1);
+#endif            
 		} else {
 			tmoveto(term.c.x, term.c.y+1);
 		}
@@ -2254,7 +2633,11 @@
 		break;
 	case 'M': /* RI -- Reverse index */
 		if (term.c.y == term.top) {
+#ifdef SCROLLBACK
+            tscrolldown(term.top, 1, 1);
+#else            
 			tscrolldown(term.top, 1);
+#endif            
 		} else {
 			tmoveto(term.c.x, term.c.y-1);
 		}
@@ -2464,7 +2847,11 @@
 void
 tresize(int col, int row)
 {
+#ifdef SCROLLBACK
+    int i, j;
+#else    
 	int i;
+#endif    
 	int minrow = MIN(row, term.row);
 	int mincol = MIN(col, term.col);
 	int *bp;
@@ -2501,6 +2888,16 @@
 	term.dirty = xrealloc(term.dirty, row * sizeof(*term.dirty));
 	term.tabs = xrealloc(term.tabs, col * sizeof(*term.tabs));
 
+#ifdef SCROLLBACK
+    for (i = 0; i < HISTSIZE; i++) {
+		term.hist[i] = xrealloc(term.hist[i], col * sizeof(Glyph));
+		for (j = mincol; j < col; j++) {
+			term.hist[i][j] = term.c.attr;
+			term.hist[i][j].u = ' ';
+		}
+	}
+#endif
+
 	/* resize each row to new width, zero-pad if needed */
 	for (i = 0; i < minrow; i++) {
 		term.line[i] = xrealloc(term.line[i], col * sizeof(Glyph));
@@ -2559,7 +2956,11 @@
 			continue;
 
 		term.dirty[y] = 0;
+#ifdef SCROLLBACK
+        xdrawline(TLINE(y), x1, y, x2);
+#else        
 		xdrawline(term.line[y], x1, y, x2);
+#endif        
 	}
 }
 
@@ -2580,8 +2981,24 @@
 		cx--;
 
 	drawregion(0, 0, term.col, term.row);
+#ifdef SCROLLBACK
+    if (term.scr == 0)
+		xdrawcursor(cx, term.c.y, term.line[term.c.y][cx],
+#ifdef LIGATURES
+                term.ocx, term.ocy, term.line[term.ocy][term.ocx],
+				term.line[term.ocy], term.col);
+#else
+				term.ocx, term.ocy, term.line[term.ocy][term.ocx]);
+#endif
+#else    
 	xdrawcursor(cx, term.c.y, term.line[term.c.y][cx],
+#ifdef LIGATURES
+            term.ocx, term.ocy, term.line[term.ocy][term.ocx],
+				term.line[term.ocy], term.col);
+#else    
 			term.ocx, term.ocy, term.line[term.ocy][term.ocx]);
+#endif            
+#endif    
 	term.ocx = cx;
 	term.ocy = term.c.y;
 	xfinishdraw();
@@ -2595,3 +3012,191 @@
 	tfulldirt();
 	draw();
 }
+
+#ifdef BOXDRAW
+/* Rounded non-negative integers division of n / d  */
+#define DIV(n, d) (((n) + (d) / 2) / (d))
+
+static Display *xdpy;
+static Colormap xcmap;
+static XftDraw *xd;
+static Visual *xvis;
+
+static void drawbox(int, int, int, int, XftColor *, XftColor *, ushort);
+static void drawboxlines(int, int, int, int, XftColor *, ushort);
+
+/* public API */
+
+void
+boxdraw_xinit(Display *dpy, Colormap cmap, XftDraw *draw, Visual *vis)
+{
+	xdpy = dpy; xcmap = cmap; xd = draw, xvis = vis;
+}
+
+int
+isboxdraw(Rune u)
+{
+	Rune block = u & ~0xff;
+	return (boxdraw && block == 0x2500 && boxdata[(uint8_t)u]) ||
+	       (boxdraw_braille && block == 0x2800);
+}
+
+/* the "index" is actually the entire shape data encoded as ushort */
+ushort
+boxdrawindex(const Glyph *g)
+{
+	if (boxdraw_braille && (g->u & ~0xff) == 0x2800)
+		return BRL | (uint8_t)g->u;
+	if (boxdraw_bold && (g->mode & ATTR_BOLD))
+		return BDB | boxdata[(uint8_t)g->u];
+	return boxdata[(uint8_t)g->u];
+}
+
+void
+drawboxes(int x, int y, int cw, int ch, XftColor *fg, XftColor *bg,
+          const XftGlyphFontSpec *specs, int len)
+{
+	for ( ; len-- > 0; x += cw, specs++)
+		drawbox(x, y, cw, ch, fg, bg, (ushort)specs->glyph);
+}
+
+/* implementation */
+
+void
+drawbox(int x, int y, int w, int h, XftColor *fg, XftColor *bg, ushort bd)
+{
+	ushort cat = bd & ~(BDB | 0xff);  /* mask out bold and data */
+	if (bd & (BDL | BDA)) {
+		/* lines (light/double/heavy/arcs) */
+		drawboxlines(x, y, w, h, fg, bd);
+
+	} else if (cat == BBD) {
+		/* lower (8-X)/8 block */
+		int d = DIV((uint8_t)bd * h, 8);
+		XftDrawRect(xd, fg, x, y + d, w, h - d);
+
+	} else if (cat == BBU) {
+		/* upper X/8 block */
+		XftDrawRect(xd, fg, x, y, w, DIV((uint8_t)bd * h, 8));
+
+	} else if (cat == BBL) {
+		/* left X/8 block */
+		XftDrawRect(xd, fg, x, y, DIV((uint8_t)bd * w, 8), h);
+
+	} else if (cat == BBR) {
+		/* right (8-X)/8 block */
+		int d = DIV((uint8_t)bd * w, 8);
+		XftDrawRect(xd, fg, x + d, y, w - d, h);
+
+	} else if (cat == BBQ) {
+		/* Quadrants */
+		int w2 = DIV(w, 2), h2 = DIV(h, 2);
+		if (bd & TL)
+			XftDrawRect(xd, fg, x, y, w2, h2);
+		if (bd & TR)
+			XftDrawRect(xd, fg, x + w2, y, w - w2, h2);
+		if (bd & BL)
+			XftDrawRect(xd, fg, x, y + h2, w2, h - h2);
+		if (bd & BR)
+			XftDrawRect(xd, fg, x + w2, y + h2, w - w2, h - h2);
+
+	} else if (bd & BBS) {
+		/* Shades - data is 1/2/3 for 25%/50%/75% alpha, respectively */
+		int d = (uint8_t)bd;
+		XftColor xfc;
+		XRenderColor xrc = { .alpha = 0xffff };
+
+		xrc.red = DIV(fg->color.red * d + bg->color.red * (4 - d), 4);
+		xrc.green = DIV(fg->color.green * d + bg->color.green * (4 - d), 4);
+		xrc.blue = DIV(fg->color.blue * d + bg->color.blue * (4 - d), 4);
+
+		XftColorAllocValue(xdpy, xvis, xcmap, &xrc, &xfc);
+		XftDrawRect(xd, &xfc, x, y, w, h);
+		XftColorFree(xdpy, xvis, xcmap, &xfc);
+
+	} else if (cat == BRL) {
+		/* braille, each data bit corresponds to one dot at 2x4 grid */
+		int w1 = DIV(w, 2);
+		int h1 = DIV(h, 4), h2 = DIV(h, 2), h3 = DIV(3 * h, 4);
+
+		if (bd & 1)   XftDrawRect(xd, fg, x, y, w1, h1);
+		if (bd & 2)   XftDrawRect(xd, fg, x, y + h1, w1, h2 - h1);
+		if (bd & 4)   XftDrawRect(xd, fg, x, y + h2, w1, h3 - h2);
+		if (bd & 8)   XftDrawRect(xd, fg, x + w1, y, w - w1, h1);
+		if (bd & 16)  XftDrawRect(xd, fg, x + w1, y + h1, w - w1, h2 - h1);
+		if (bd & 32)  XftDrawRect(xd, fg, x + w1, y + h2, w - w1, h3 - h2);
+		if (bd & 64)  XftDrawRect(xd, fg, x, y + h3, w1, h - h3);
+		if (bd & 128) XftDrawRect(xd, fg, x + w1, y + h3, w - w1, h - h3);
+
+	}
+}
+
+void
+drawboxlines(int x, int y, int w, int h, XftColor *fg, ushort bd)
+{
+	/* s: stem thickness. width/8 roughly matches underscore thickness. */
+	/* We draw bold as 1.5 * normal-stem and at least 1px thicker.      */
+	/* doubles draw at least 3px, even when w or h < 3. bold needs 6px. */
+	int mwh = MIN(w, h);
+	int base_s = MAX(1, DIV(mwh, 8));
+	int bold = (bd & BDB) && mwh >= 6;  /* possibly ignore boldness */
+	int s = bold ? MAX(base_s + 1, DIV(3 * base_s, 2)) : base_s;
+	int w2 = DIV(w - s, 2), h2 = DIV(h - s, 2);
+	/* the s-by-s square (x + w2, y + h2, s, s) is the center texel.    */
+	/* The base length (per direction till edge) includes this square.  */
+
+	int light = bd & (LL | LU | LR | LD);
+	int double_ = bd & (DL | DU | DR | DD);
+
+	if (light) {
+		/* d: additional (negative) length to not-draw the center   */
+		/* texel - at arcs and avoid drawing inside (some) doubles  */
+		int arc = bd & BDA;
+		int multi_light = light & (light - 1);
+		int multi_double = double_ & (double_ - 1);
+		/* light crosses double only at DH+LV, DV+LH (ref. shapes)  */
+		int d = arc || (multi_double && !multi_light) ? -s : 0;
+
+		if (bd & LL)
+			XftDrawRect(xd, fg, x, y + h2, w2 + s + d, s);
+		if (bd & LU)
+			XftDrawRect(xd, fg, x + w2, y, s, h2 + s + d);
+		if (bd & LR)
+			XftDrawRect(xd, fg, x + w2 - d, y + h2, w - w2 + d, s);
+		if (bd & LD)
+			XftDrawRect(xd, fg, x + w2, y + h2 - d, s, h - h2 + d);
+	}
+
+	/* double lines - also align with light to form heavy when combined */
+	if (double_) {
+		/*
+		* going clockwise, for each double-ray: p is additional length
+		* to the single-ray nearer to the previous direction, and n to
+		* the next. p and n adjust from the base length to lengths
+		* which consider other doubles - shorter to avoid intersections
+		* (p, n), or longer to draw the far-corner texel (n).
+		*/
+		int dl = bd & DL, du = bd & DU, dr = bd & DR, dd = bd & DD;
+		if (dl) {
+			int p = dd ? -s : 0, n = du ? -s : dd ? s : 0;
+			XftDrawRect(xd, fg, x, y + h2 + s, w2 + s + p, s);
+			XftDrawRect(xd, fg, x, y + h2 - s, w2 + s + n, s);
+		}
+		if (du) {
+			int p = dl ? -s : 0, n = dr ? -s : dl ? s : 0;
+			XftDrawRect(xd, fg, x + w2 - s, y, s, h2 + s + p);
+			XftDrawRect(xd, fg, x + w2 + s, y, s, h2 + s + n);
+		}
+		if (dr) {
+			int p = du ? -s : 0, n = dd ? -s : du ? s : 0;
+			XftDrawRect(xd, fg, x + w2 - p, y + h2 - s, w - w2 + p, s);
+			XftDrawRect(xd, fg, x + w2 - n, y + h2 + s, w - w2 + n, s);
+		}
+		if (dd) {
+			int p = dr ? -s : 0, n = dl ? -s : dr ? s : 0;
+			XftDrawRect(xd, fg, x + w2 + s, y + h2 - p, s, h - h2 + p);
+			XftDrawRect(xd, fg, x + w2 - s, y + h2 - n, s, h - h2 + n);
+		}
+	}
+}
+#endif
--- a/x.c-org	2020-12-19 23:54:03.741382272 +0100
+++ b/x.c	2020-12-21 20:35:30.677136465 +0100
@@ -155,6 +155,10 @@
 static void xresize(int, int);
 static void xhints(void);
 static int xloadcolor(int, const char *, Color *);
+#ifdef FONT2
+static int xloadsparefont(FcPattern *, int);
+static void xloadsparefonts(void);
+#endif
 static int xloadfont(Font *, FcPattern *);
 static void xloadfonts(char *, double);
 static void xunloadfont(Font *);
@@ -253,6 +257,9 @@
 static char *opt_title = NULL;
 
 static int oldbutton = 3; /* button event on startup: 3 = release */
+#ifdef BLINKINGCURSOR
+static int cursorblinks = 0;
+#endif
 
 void
 clipcopy(const Arg *dummy)
@@ -306,6 +313,9 @@
 {
 	xunloadfonts();
 	xloadfonts(usedfont, arg->f);
+#ifdef FONT2
+    xloadsparefonts();
+#endif    
 	cresize(0, 0);
 	redraw();
 	xhints();
@@ -673,6 +683,9 @@
 	XSetSelectionOwner(xw.dpy, XA_PRIMARY, xw.win, t);
 	if (XGetSelectionOwner(xw.dpy, XA_PRIMARY) != xw.win)
 		selclear();
+#ifdef CLIPBOARD    
+    clipcopy(NULL);
+#endif    
 }
 
 void
@@ -1019,6 +1032,103 @@
 	FcPatternDestroy(pattern);
 }
 
+#ifdef FONT2
+int
+xloadsparefont(FcPattern *pattern, int flags)
+{
+	FcPattern *match;
+	FcResult result;
+	
+	match = FcFontMatch(NULL, pattern, &result);
+	if (!match) {
+		return 1;
+	}
+
+	if (!(frc[frclen].font = XftFontOpenPattern(xw.dpy, match))) {
+		FcPatternDestroy(match);
+		return 1;
+	}
+
+	frc[frclen].flags = flags;
+	/* Believe U+0000 glyph will present in each default font */
+	frc[frclen].unicodep = 0;
+	frclen++;
+
+	return 0;
+}
+
+void
+xloadsparefonts(void)
+{
+	FcPattern *pattern;
+	double sizeshift, fontval;
+	int fc;
+	char **fp;
+
+	if (frclen != 0)
+		die("can't embed spare fonts. cache isn't empty");
+
+	/* Calculate count of spare fonts */
+	fc = sizeof(font2) / sizeof(*font2);
+	if (fc == 0)
+		return;
+
+	/* Allocate memory for cache entries. */
+	if (frccap < 4 * fc) {
+		frccap += 4 * fc - frccap;
+		frc = xrealloc(frc, frccap * sizeof(Fontcache));
+	}
+
+	for (fp = font2; fp - font2 < fc; ++fp) {
+	
+		if (**fp == '-')
+			pattern = XftXlfdParse(*fp, False, False);
+		else
+			pattern = FcNameParse((FcChar8 *)*fp);
+	
+		if (!pattern)
+			die("can't open spare font %s\n", *fp);
+	   		
+		if (defaultfontsize > 0) {
+			sizeshift = usedfontsize - defaultfontsize;
+			if (sizeshift != 0 &&
+					FcPatternGetDouble(pattern, FC_PIXEL_SIZE, 0, &fontval) ==
+					FcResultMatch) {	
+				fontval += sizeshift;
+				FcPatternDel(pattern, FC_PIXEL_SIZE);
+				FcPatternDel(pattern, FC_SIZE);
+				FcPatternAddDouble(pattern, FC_PIXEL_SIZE, fontval);
+			}
+		}
+	
+		FcPatternAddBool(pattern, FC_SCALABLE, 1);
+	
+		FcConfigSubstitute(NULL, pattern, FcMatchPattern);
+		XftDefaultSubstitute(xw.dpy, xw.scr, pattern);
+	
+		if (xloadsparefont(pattern, FRC_NORMAL))
+			die("can't open spare font %s\n", *fp);
+	
+		FcPatternDel(pattern, FC_SLANT);
+		FcPatternAddInteger(pattern, FC_SLANT, FC_SLANT_ITALIC);
+		if (xloadsparefont(pattern, FRC_ITALIC))
+			die("can't open spare font %s\n", *fp);
+			
+		FcPatternDel(pattern, FC_WEIGHT);
+		FcPatternAddInteger(pattern, FC_WEIGHT, FC_WEIGHT_BOLD);
+		if (xloadsparefont(pattern, FRC_ITALICBOLD))
+			die("can't open spare font %s\n", *fp);
+	
+		FcPatternDel(pattern, FC_SLANT);
+		FcPatternAddInteger(pattern, FC_SLANT, FC_SLANT_ROMAN);
+		if (xloadsparefont(pattern, FRC_BOLD))
+			die("can't open spare font %s\n", *fp);
+	
+		FcPatternDestroy(pattern);
+	}
+}
+#endif
+
 void
 xunloadfont(Font *f)
 {
@@ -1031,7 +1141,11 @@
 void
 xunloadfonts(void)
 {
-	/* Free the loaded fonts in the font cache.  */
+#ifdef LIGATURES
+    /* Clear Harfbuzz font cache. */
+	hbunloadfonts();
+#endif    
+    /* Free the loaded fonts in the font cache.  */
 	while (frclen > 0)
 		XftFontClose(xw.dpy, frc[--frclen].font);
 
@@ -1116,6 +1230,11 @@
 	usedfont = (opt_font == NULL)? font : opt_font;
 	xloadfonts(usedfont, 0);
 
+#ifdef FONT2
+    /* spare fonts */
+	xloadsparefonts();
+#endif
+
 	/* colors */
 	xw.cmap = XDefaultColormap(xw.dpy, xw.scr);
 	xloadcols();
@@ -1205,6 +1324,10 @@
 	xsel.xtarget = XInternAtom(xw.dpy, "UTF8_STRING", 0);
 	if (xsel.xtarget == None)
 		xsel.xtarget = XA_STRING;
+
+#ifdef BOXDRAW
+    boxdraw_xinit(xw.dpy, xw.cmap, xw.draw, xw.vis);
+#endif
 }
 
 int
@@ -1229,7 +1352,11 @@
 		mode = glyphs[i].mode;
 
 		/* Skip dummy wide-character spacing. */
+#ifdef LIGATURES
+        if (mode & ATTR_WDUMMY)
+#else            
 		if (mode == ATTR_WDUMMY)
+#endif            
 			continue;
 
 		/* Determine font for glyph if different from previous glyph. */
@@ -1251,9 +1378,19 @@
 			yp = winy + font->ascent;
 		}
 
+#ifdef BOXDRAW
+        if (mode & ATTR_BOXDRAW) {
+			/* minor shoehorning: boxdraw uses only this ushort */
+			glyphidx = boxdrawindex(&glyphs[i]);
+		} else {
+			/* Lookup character index with default font. */
+			glyphidx = XftCharIndex(xw.dpy, font->match, rune);
+		}
+#else
 		/* Lookup character index with default font. */
 		glyphidx = XftCharIndex(xw.dpy, font->match, rune);
-		if (glyphidx) {
+#endif
+        if (glyphidx) {
 			specs[numspecs].font = font->match;
 			specs[numspecs].glyph = glyphidx;
 			specs[numspecs].x = (short)xp;
@@ -1336,6 +1473,11 @@
 		numspecs++;
 	}
 
+#ifdef LIGATURES
+    /* Harfbuzz transformation for ligatures. */
+	hbtransform(specs, glyphs, len, x, y);
+#endif
+
 	return numspecs;
 }
 
@@ -1457,7 +1599,16 @@
 	XftDrawSetClipRectangles(xw.draw, winx, winy, &r, 1);
 
 	/* Render the glyphs. */
+#ifdef BOXDRAW
+    if (base.mode & ATTR_BOXDRAW) {
+		drawboxes(winx, winy, width / len, win.ch, fg, bg, specs, len);
+	} else {
+		/* Render the glyphs. */
+		XftDrawGlyphFontSpec(xw.draw, fg, specs, len);
+	}
+#else
 	XftDrawGlyphFontSpec(xw.draw, fg, specs, len);
+#endif
 
 	/* Render underline and strikethrough. */
 	if (base.mode & ATTR_UNDERLINE) {
@@ -1485,14 +1636,24 @@
 }
 
 void
+#ifdef LIGATURES
+xdrawcursor(int cx, int cy, Glyph g, int ox, int oy, Glyph og, Line line, int len)
+#else
 xdrawcursor(int cx, int cy, Glyph g, int ox, int oy, Glyph og)
+#endif
 {
 	Color drawcol;
 
 	/* remove the old cursor */
 	if (selected(ox, oy))
 		og.mode ^= ATTR_REVERSE;
+#ifdef LIGATURES
+    /* Redraw the line where cursor was previously.
+	 * It will restore the ligatures broken by the cursor. */
+	xdrawline(line, 0, oy, len);
+#else    
 	xdrawglyph(og, ox, oy);
+#endif
 
 	if (IS_SET(MODE_HIDE))
 		return;
@@ -1500,7 +1661,11 @@
 	/*
 	 * Select the right color for the right mode.
 	 */
-	g.mode &= ATTR_BOLD|ATTR_ITALIC|ATTR_UNDERLINE|ATTR_STRUCK|ATTR_WIDE;
+#ifdef BOXDRAW
+    g.mode &= ATTR_BOLD|ATTR_ITALIC|ATTR_UNDERLINE|ATTR_STRUCK|ATTR_WIDE|ATTR_BOXDRAW;    
+#else	
+    g.mode &= ATTR_BOLD|ATTR_ITALIC|ATTR_UNDERLINE|ATTR_STRUCK|ATTR_WIDE;
+#endif
 
 	if (IS_SET(MODE_REVERSE)) {
 		g.mode |= ATTR_REVERSE;
@@ -1526,16 +1691,35 @@
 	/* draw the new one */
 	if (IS_SET(MODE_FOCUSED)) {
 		switch (win.cursor) {
+#ifdef BLINKINGCURSOR
+		case 0: /* Blinking block */
+		case 1: /* Blinking block (default) */
+			if (IS_SET(MODE_BLINK))
+				break;
+#else
 		case 7: /* st extension */
 			g.u = 0x2603; /* snowman (U+2603) */
+#endif            
 			/* FALLTHROUGH */
+#ifdef BLINKINGCURSOR
+        case 2: /* Steady block */
+#else            
 		case 0: /* Blinking Block */
 		case 1: /* Blinking Block (Default) */
 		case 2: /* Steady Block */
+#endif            
 			xdrawglyph(g, cx, cy);
 			break;
+#ifdef BLINKINGCURSOR
+		case 3: /* Blinking underline */
+			if (IS_SET(MODE_BLINK))
+				break;
+			/* FALLTHROUGH */
+		case 4: /* Steady underline */
+#else
 		case 3: /* Blinking Underline */
 		case 4: /* Steady Underline */
+#endif
 			XftDrawRect(xw.draw, &drawcol,
 					borderpx + cx * win.cw,
 					borderpx + (cy + 1) * win.ch - \
@@ -1543,12 +1727,27 @@
 					win.cw, cursorthickness);
 			break;
 		case 5: /* Blinking bar */
+#ifdef BLINKINGCURSOR
+			if (IS_SET(MODE_BLINK))
+				break;
+			/* FALLTHROUGH */
+#endif    
 		case 6: /* Steady bar */
 			XftDrawRect(xw.draw, &drawcol,
 					borderpx + cx * win.cw,
 					borderpx + cy * win.ch,
 					cursorthickness, win.ch);
 			break;
+#ifdef BLINKINGCURSOR
+		case 7: /* Blinking st cursor */
+			if (IS_SET(MODE_BLINK))
+				break;
+			/* FALLTHROUGH */
+		case 8: /* Steady st cursor */
+			g.u = stcursor;
+			xdrawglyph(g, cx, cy);
+			break;
+#endif
 		}
 	} else {
 		XftDrawRect(xw.draw, &drawcol,
@@ -1592,6 +1791,44 @@
 	XFree(prop.value);
 }
 
+#ifdef VISUALBELL2
+static int vbellset = 0; /* 1 during visual bell, 0 otherwise */
+static struct timespec lastvbell = {0};
+
+static int
+isvbellcell(int x, int y)
+{
+	int right = win.tw / win.cw - 1, bottom = win.th / win.ch - 1;
+    return vbellmode == 0 && (VBCELL);  /* logic defined at config.h */
+}
+
+static void
+vbellbegin() {
+	clock_gettime(CLOCK_MONOTONIC, &lastvbell);
+	if (vbellset)
+		return;
+	vbellset = 1;
+	redraw();
+	XFlush(xw.dpy);
+}
+
+static void
+xfillcircle(int x, int y, int r, uint color_ix)
+{
+	XSetForeground(xw.dpy, dc.gc, dc.col[color_ix].pixel);
+	XFillArc(xw.dpy, xw.buf, dc.gc, x - r, y - r, r * 2, r * 2, 0, 360*64);
+}
+
+static void
+xdrawvbell() {
+	int r = round(vbellradius * (vbellradius > 0 ? win.w : -win.cw));
+	int x = borderpx + r + vbellx * (win.tw - 2 * r);
+	int y = borderpx + r + vbelly * (win.th - 2 * r);
+	xfillcircle(x, y, r, vbellcolor_outline);
+	xfillcircle(x, y, r / 1.2, vbellcolor); /* 1.2 - an artistic choice */
+}
+#endif
+
 int
 xstartdraw(void)
 {
@@ -1613,6 +1850,10 @@
 			continue;
 		if (selected(x, y1))
 			new.mode ^= ATTR_REVERSE;
+#ifdef VISUALBELL2
+        if (vbellset && isvbellcell(x, y1))
+			new.mode ^= ATTR_REVERSE;
+#endif        
 		if (i > 0 && ATTRCMP(base, new)) {
 			xdrawglyphfontspecs(specs, base, i, ox, y1);
 			specs += i;
@@ -1632,6 +1873,10 @@
 void
 xfinishdraw(void)
 {
+#ifdef VISUALBELL2
+    if (vbellset && vbellmode == 1)
+		xdrawvbell();
+#endif    
 	XCopyArea(xw.dpy, xw.buf, xw.win, dc.gc, 0, 0, win.w,
 			win.h, 0, 0);
 	XSetForeground(xw.dpy, dc.gc,
@@ -1690,9 +1935,18 @@
 int
 xsetcursor(int cursor)
 {
+#ifdef BLINKINGCURSOR
+    if (!BETWEEN(cursor, 0, 8)) /* 7-8: st extensions */
+#else    
 	if (!BETWEEN(cursor, 0, 7)) /* 7: st extension */
+#endif        
 		return 1;
 	win.cursor = cursor;
+#ifdef BLINKINGCURSOR
+	cursorblinks = win.cursor == 0 || win.cursor == 1 ||
+	               win.cursor == 3 || win.cursor == 5 ||
+	               win.cursor == 7;
+#endif
 	return 0;
 }
 
@@ -1713,6 +1967,10 @@
 		xseturgency(1);
 	if (bellvolume)
 		XkbBell(xw.dpy, xw.win, bellvolume, (Atom)NULL);
+#ifdef VISUALBELL2
+    if (vbelltimeout)
+		vbellbegin();
+#endif    
 }
 
 void
@@ -1936,6 +2194,12 @@
 		if (FD_ISSET(ttyfd, &rfd) || xev) {
 			if (!drawing) {
 				trigger = now;
+#ifdef BLINKINGCURSOR
+				if (IS_SET(MODE_BLINK)) {
+					win.mode ^= MODE_BLINK;
+				}
+				lastblink = now;
+#endif
 				drawing = 1;
 			}
 			timeout = (maxlatency - TIMEDIFF(now, trigger)) \
@@ -1946,7 +2210,11 @@
 
 		/* idle detected or maxlatency exhausted -> draw */
 		timeout = -1;
+#ifdef BLINKINGCURSOR
+        if (blinktimeout && (cursorblinks || tattrset(ATTR_BLINK))) {
+#else    
 		if (blinktimeout && tattrset(ATTR_BLINK)) {
+#endif            
 			timeout = blinktimeout - TIMEDIFF(now, lastblink);
 			if (timeout <= 0) {
 				if (-timeout > blinktimeout) /* start visible */
@@ -1958,6 +2226,18 @@
 			}
 		}
 
+#ifdef VISUALBELL2
+        if (vbellset) {
+			double remain = vbelltimeout - TIMEDIFF(now, lastvbell);
+			if (remain <= 0) {
+				vbellset = 0;
+				redraw();
+			} else if (timeout < 0 || remain < timeout) {
+				timeout = remain;
+			}
+		}
+#endif
+
 		draw();
 		XFlush(xw.dpy);
 		drawing = 0;
@@ -1982,7 +2262,11 @@
 {
 	xw.l = xw.t = 0;
 	xw.isfixed = False;
+#ifdef BLINKINGCURSOR
+    xsetcursor(cursorstyle);
+#else    
 	xsetcursor(cursorshape);
+#endif    
 
 	ARGBEGIN {
 	case 'a':
--- a/win.h-org	2020-12-19 23:54:03.741382272 +0100
+++ b/win.h	2020-12-21 20:39:15.503170365 +0100
@@ -25,7 +25,11 @@
 
 void xbell(void);
 void xclipcopy(void);
+#ifdef LIGATURES
+void xdrawcursor(int, int, Glyph, int, int, Glyph, Line, int);
+#else
 void xdrawcursor(int, int, Glyph, int, int, Glyph);
+#endif
 void xdrawline(Line, int, int, int);
 void xfinishdraw(void);
 void xloadcols(void);
--- a/config.mk	2020-12-19 23:54:03.741382272 +0100
+++ b/config.mk	2020-12-21 23:00:40.995472992 +0100
@@ -10,18 +10,33 @@
 X11INC = /usr/include/X11
 X11LIB = /usr/lib64/X11
 
+LIGATURESLIBS = `$(PKG_CONFIG) --libs harfbuzz`
+
 PKG_CONFIG = pkg-config
 
+BOXDRAWFLAGS = -DBOXDRAW
+ANYSIZEFLAGS = -DANYSIZE
+BLINKINGCURSORFLAGS = -DBLINKINGCURSOR
+CLIPBOARDFLAGS = -DCLIPBOARD
+EXTERNALPIPEFLAGS = -DEXTERNALPIPE
+FONT2FLAGS = -DFONT2
+LIGATURESFLAGS = -DLIGATURES
+SCROLLBACKFLAGS = -DSCROLLBACK
+VISUALBELL2FLAGS = -DVISUALBELL2
+ALPHAFLAGS = -DALPHA
+
 # includes and libs
 INCS = -I$(X11INC) \
        `$(PKG_CONFIG) --cflags fontconfig` \
        `$(PKG_CONFIG) --cflags freetype2`
 LIBS = -L$(X11LIB) -lm -lrt -lX11 -lutil -lXft \
        `$(PKG_CONFIG) --libs fontconfig` \
-       `$(PKG_CONFIG) --libs freetype2`
-
+       `$(PKG_CONFIG) --libs freetype2` \
+		${LIGATURESLIBS}
 # flags
-STCPPFLAGS = -DVERSION=\"$(VERSION)\" -D_XOPEN_SOURCE=600
+STCPPFLAGS = -DVERSION=\"$(VERSION)\" -D_XOPEN_SOURCE=600 ${BOXDRAWFLAGS} ${ANYSIZEFLAGS} \
+			 ${BLINKINGCURSORFLAGS} ${CLIPBOARDFLAGS} ${EXTERNALPIPEFLAGS} ${FONT2FLAGS} \
+			 ${LIGATURESFLAGS} ${SCROLLBACKFLAGS} ${VISUALBELL2FLAGS} ${ALPHAFLAGS}
 STCFLAGS = $(INCS) $(STCPPFLAGS) $(CPPFLAGS) $(CFLAGS)
 STLDFLAGS = $(LDFLAGS) $(LIBS)
 --- a/config.def.h	2020-12-24 12:34:41.270748041 +0100
+++ b/config.def.h	2020-12-24 12:25:48.561501413 +0100
@@ -5,9 +5,51 @@
  *
  * font: see http://freedesktop.org/software/fontconfig/fontconfig-user.html
  */
-static char *font = "Liberation Mono:pixelsize=12:antialias=true:autohint=true";
+static char *font = "JetBrains Mono:weight=medium:pixelsize=14:antialias=true:autohint=true";
+static char *font2[] = { 
+	"Hack Nerd Font:pixelsize=14:antialias=true:autohint=true",
+	"Noto Color Emoji:pixelsize=14:antialias=true:autohint=true"
+};	
 static int borderpx = 2;
 
+/* bg opacity */
+float alpha = 0.95;
+
+#ifdef BOXDRAW
+/*
+ * 1: render most of the lines/blocks characters without using the font for
+ *    perfect alignment between cells (U2500 - U259F except dashes/diagonals).
+ *    Bold affects lines thickness if boxdraw_bold is not 0. Italic is ignored.
+ * 0: disable (render all U25XX glyphs normally from the font).
+ */
+const int boxdraw = 1;
+const int boxdraw_bold = 1;
+
+/* braille (U28XX):  1: render as adjacent "pixels",  0: use font */
+const int boxdraw_braille = 1;
+#endif
+
+#ifdef VISUALBELL2
+/* visual-bell timeout in ms (0 to disable visual-bell) */
+static int vbelltimeout = 150;
+
+/* choose predefined visual-bell cells to inverse, or define your own logic */
+#define VBCELL x==0 || x==right || y==0 || y==bottom  /* border */
+// #define VBCELL 1  /* all cells - whole screen */
+// #define VBCELL y==bottom && x>right-2  /* bottom-right */
+
+static int vbellmode = 1;
+/* vbellmode: 0: invert cells. 1: draw a circle with these parameters:
++ * - base and outline colors (colorname index - see below)
++ * - radius: relative to window width, or if negative: relative to cell-width
++ * - position: relative to window width/height (0 and 1 are at the edges) */
+static int vbellcolor = 3;
+static int vbellcolor_outline = 1;
+static float vbellradius = 0.03;
+static float vbellx = 0.5;
+static float vbelly = 0.5;
+#endif
+
 /*
  * What program is execed by st depends of these precedence rules:
  * 1: program passed with -e
@@ -95,51 +137,65 @@
 
 /* Terminal colors (16 first used in escape sequence) */
 static const char *colorname[] = {
-	/* 8 normal colors */
-	"black",
-	"red3",
-	"green3",
-	"yellow3",
-	"blue2",
-	"magenta3",
-	"cyan3",
-	"gray90",
-
-	/* 8 bright colors */
-	"gray50",
-	"red",
-	"green",
-	"yellow",
-	"#5c5cff",
-	"magenta",
-	"cyan",
-	"white",
-
-	[255] = 0,
-
-	/* more colors can be added after 255 to use with DefaultXX */
-	"#cccccc",
-	"#555555",
+    // Code Dark scheme
+    /* 8 normal colors */
+    [0] = "#000000", /* black   */
+    [1] = "#cd3131", /* red     */
+    [2] = "#0dbc79", /* green   */
+    [3] = "#e5e510", /* yellow  */
+    [4] = "#2472c8", /* blue    */
+    [5] = "#bc3fbc", /* magenta */
+    [6] = "#11a8cd", /* cyan    */
+    [7] = "#e5e5e5", /* white   */
+    /* 8 bright colors */
+    [8]  = "#666666", /* black   */
+    [9]  = "#f14c4c", /* red     */
+    [10] = "#23d18b", /* green   */
+    [11] = "#f5f543", /* yellow  */
+    [12] = "#3b8eea", /* blue    */
+    [13] = "#d670d6", /* magenta */
+    [14] = "#29b8db", /* cyan    */
+    [15] = "#e5e5e5", /* white   */
+
+  /* special colors */
+  [256] = "#1e1e1e", /* background */
+  [257] = "#d4d4d4", /* foreground */
+  [258] = "black",
+  [259] = "#d75f00", // cursor color
 };
 
-
 /*
  * Default colors (colorname index)
  * foreground, background, cursor, reverse cursor
  */
-unsigned int defaultfg = 7;
-unsigned int defaultbg = 0;
-static unsigned int defaultcs = 256;
-static unsigned int defaultrcs = 257;
 
-/*
- * Default shape of cursor
- * 2: Block ("█")
- * 4: Underline ("_")
- * 6: Bar ("|")
- * 7: Snowman ("☃")
- */
+unsigned int defaultfg = 257;
+unsigned int defaultbg = 256;
+static unsigned int defaultcs = 259;
+static unsigned int defaultrcs = 258;
+unsigned int defaultitalic = 7;
+unsigned int defaultunderline = 7;
+
+#ifdef BLINKINGCURSOR
+/*
+ * https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h4-Functions-using-CSI-_-ordered-by-the-final-character-lparen-s-rparen:CSI-Ps-SP-q.1D81
+ * Default style of cursor
+ * 0: Blinking block
+ * 1: Blinking block (default)
+ * 2: Steady block ("█")
+ * 3: Blinking underline
+ * 4: Steady underline ("_")
+ * 5: Blinking bar
+ * 6: Steady bar ("|")
+ * 7: Blinking st cursor
+ * 8: Steady st cursor
+ */
+
+static unsigned int cursorstyle = 1;
+static Rune stcursor = 0x2603; /* snowman (U+2603) */
+#else
 static unsigned int cursorshape = 2;
+#endif
 
 /*
  * Default columns and rows numbers
@@ -174,7 +230,11 @@
  */
 static MouseShortcut mshortcuts[] = {
 	/* mask                 button   function        argument       release */
-	{ XK_ANY_MOD,           Button2, selpaste,       {.i = 0},      1 },
+#ifdef SCROLLBACK
+    { XK_ANY_MOD,           Button4, kscrollup,      {.i = 1} },
+	{ XK_ANY_MOD,           Button5, kscrolldown,    {.i = 1} },
+#endif
+    { XK_ANY_MOD,           Button2, selpaste,       {.i = 0},      1 },
 	{ ShiftMask,            Button4, ttysend,        {.s = "\033[5;2~"} },
 	{ XK_ANY_MOD,           Button4, ttysend,        {.s = "\031"} },
 	{ ShiftMask,            Button5, ttysend,        {.s = "\033[6;2~"} },
@@ -185,6 +245,10 @@
 #define MODKEY Mod1Mask
 #define TERMMOD (ControlMask|ShiftMask)
 
+#ifdef EXTERNALPIPE
+static char *openurlcmd[] = { "/bin/sh", "-c", "st-urlhandler", "externalpipe", NULL };
+#endif
+
 static Shortcut shortcuts[] = {
 	/* mask                 keysym          function        argument */
 	{ XK_ANY_MOD,           XK_Break,       sendbreak,      {.i =  0} },
@@ -199,6 +263,13 @@
 	{ TERMMOD,              XK_Y,           selpaste,       {.i =  0} },
 	{ ShiftMask,            XK_Insert,      selpaste,       {.i =  0} },
 	{ TERMMOD,              XK_Num_Lock,    numlock,        {.i =  0} },
+#ifdef EXTERNALPIPE
+    { MODKEY,               XK_l,           externalpipe,   {.v = openurlcmd } },
+#endif
+#ifdef SCROLLBACK
+    { ShiftMask,            XK_Page_Up,     kscrollup,      {.i = -1} },
+	{ ShiftMask,            XK_Page_Down,   kscrolldown,    {.i = -1} },
+#endif
 };
 
 /*
